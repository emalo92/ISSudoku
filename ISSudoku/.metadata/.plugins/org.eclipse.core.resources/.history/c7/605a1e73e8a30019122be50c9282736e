package Sudoku;

import java.util.LinkedList;
import java.util.Random;
import java.util.Scanner;

public abstract class AbstractSolver implements Solver {
	
	protected Random random;
	protected int numSoluzioni = 0;
	protected boolean stop;
	protected int[][] griglia;
	protected LinkedList<Casella> listaCas;
	protected int rimanenti = 0;
	protected LinkedList<int[][]> listaSol;
	protected boolean unaSola;
	
	public AbstractSolver() {
		random = new Random();
		stop = false;
		griglia = new int [9][9];
		unaSola = false;
	}
	
	private void inizializzaLista() { //per distinguere tipo, esporta questa classe fuori dalla astratta
		listaSol = new LinkedList<int[][]>();
		listaCas = new LinkedList<Casella>();
		//risoluzione per colonne
		for (int i = 0; i<9; i++) {
			for (int j = 0; j<9; j++) {
				if (griglia [j][i] == 0) {
					listaCas.add(new Casella(j,i));
					rimanenti++;
				}
			}
		}
		
	}
	
	public LinkedList<int[][]> getListaSol() {
		return this.listaSol;
	}
	
	public int[][] getGriglia() {
		return this.griglia;
	}
	
	public boolean getStop() {
		return this.stop;
	}
	
	public void setUnaSola(boolean a) {
		if (a) 
			unaSola = true;
		else unaSola = false;
	}
	
	public LinkedList<Casella> listaCas () {
		return this.listaCas;
	}
	
	public int[][] risolvi (int daRisolvere[][]) {
		
		this.griglia = daRisolvere;
		inizializzaLista();
		//if (risolvi(0)) {
			risolvi(0);
			System.out.println("finittooo");
			return listaSol.getFirst();
	}
	
	private void risolvi(int k) {
		System.out.println("partito");
		if(unaSola) {
			if (listaSol.size()==1)
				return;
		}
		if(stop) { //termina immediatamente
			System.out.println("terminato");
			return;
		}
		if ( k >= listaCas.size()) {
			System.out.println("totale assegnamenti: " +(k+1));
			int[][] solProvvisoria = new int[9][9];
			for (int i = 0 ; i<griglia.length; i++) {
				for (int j = 0 ; j<griglia.length; j++) {
					solProvvisoria[i][j] = griglia [i][j];
				}
			}
			listaSol.add(solProvvisoria);
			return; //se vuoi mantenere le soluzioni aggiungi una lista qui 
			//attento alle condizioni.
		}
		Casella cell = listaCas.get(k);
		for (int i = 1; i<=9; i++) {
			if (verificaConsistenza(cell.riga, cell.colonna, i)) {
				griglia [cell.riga][cell.colonna] = i;
				System.out.println("verificato");
				//update (riga ,colonna)
				//if (risolvi(k+1)) {
					//System.out.println("trovato");
					//return true;
				risolvi(k+1);
			}
		}
		if (stop) {
			return;
		}
		griglia [cell.riga][cell.colonna] = 0;
		//update...
		return;
	}
	
	public abstract boolean verificaConsistenza(int r, int c, int n);
	
	protected boolean verificaRiga(int r, int c, int n) {
		if(c<9) {
			if (this.griglia[r][c] == n) {
				return false;
			}
			else {
				return verificaRiga (r, c+1, n);
			}
		}
		return true;
	}
	
	protected boolean verificaColonna(int r, int c, int n) {
		if(r<9) {
			if (this.griglia[r][c] == n) {
				return false;
			}
			else {
				return verificaColonna (r+1, c, n);
			}
		}
		return true;
	}
	
	protected boolean verificaBlocco (int r, int c, int n) {
		r = (r/3)*3;
		c = (c/3)*3;
		for (int i = 0; i<3; i++) {
			for (int j = 0; j<3; j++) {
				if (griglia[r+i][c+j] == n) {
					return false;
				}
			}
		}
		return true;
				
	}
	
	protected boolean verificaDiagonali(int r, int c, int n) {
		if (r==c) {
			for (int j = 0; j<9; j++) {
				if (griglia[j][j] == n )
					return false;
			}
		}
		if (r==8-c) {
			for (int j = 0; j<9; j++) {
				if (griglia[j][8-j] == n )
					return false;
			}
		}
		return true;
	}

}
